#+title: Uber using only Postgres

* Introduction

This link
https://www.linkedin.com/pulse/how-many-tps-can-we-get-from-single-postgres-node-nikolay-samokhvalov-yu0rc/
claims to have achieved 4M tps in a single Postgres node.

It is said that Amazon can get up to 150k tps.

The test done in the link is only using SELECTs.

This experiment will attempt to create the backend of a popular
application only in Postgres, and optimize it as much as possible
while trying to simulate realistic scenarios using pgbench.

Let's see how many tps we can get to.

* Modeling

#+begin_src plantuml :file model.png
entity pg_user {
usename : TEXT
}

entity users {
username : TEXT
}

entity ride {
id : NUMBER
--
driver: pg_user
customer: pg_user
start_location: geography(Point)
destination: geography(Point)
time : TIMESTAMPTZ
start_time: TIMESTAMPTZ
end_time: TIMESTAMPTZ
cost : NUMERIC
}

entity ride_request {
driver : pg_user
customer_location : geography(Point)
time: TIMESTAMPTZ
}

entity driver_location {
driver : pg_user
--
location : geography(Point)
}

entity ride_location {
id : NUMBER
--
current_location: geography(Point)
}

pg_user::usename --> users::username
users::username --> ride::customer
users::username --> ride::driver
ride::id --> ride_location::id
users::username --> driver_location::driver
users::username --> ride_request::driver
#+end_src

#+RESULTS:
[[file:model.png]]

* Database
:PROPERTIES:
:header-args:sql:  :engine postgres  :dbuser postgres
:header-args:sql+: :dbhost localhost :database postgres :dbpassword example
:END:

** Database

Let's first create our database. Let's call our application RIDER.

#+begin_src sql
	CREATE DATABASE RIDER;
#+end_src

#+RESULTS:
| CREATE DATABASE |
|-----------------|

#+begin_src sql
\c rider
#+end_src

#+RESULTS:
|---|

** Users

We're going to use Postgres role management system for both customer
and drivers.

A PG role can be both an user and a group. In our case, we'll have two
*groups*, *driver* and *customer*. Users can be one or both.

*** Customer/clients


#+begin_src sql :database rider
CREATE ROLE customer NOLOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;
#+end_src

#+RESULTS:
| CREATE ROLE |
|-------------|


- Create a customer

#+begin_src sql :database rider
	CREATE USER gustavokishima IN ROLE customer;
#+end_src

#+begin_src sql :database rider :dbuser gustavokishima :dbpassword 123
\du
#+end_src

#+RESULTS:
| usename        | usesysid | usecreatedb | usesuper | userepl | usebypassrls | passwd   | valuntil | useconfig |
|----------------+----------+-------------+----------+---------+--------------+----------+----------+-----------|
| postgres       |       10 | t           | t        | t       | t            | ******** |          |           |
| gustavokishima |    16390 | f           | f        | f       | f            | ******** |          |           |


** Roles and users

We can't use *pg_roles* as a reference to a table, because it is a
view. The table that *pg_roles* is derived from is *pg_authid*,
however, this is a *pg_catalog* table, which cannot be referenced.

We'll employ some tricks to circumvent this:

*** All users table

This table will have all of the users.
#+begin_src sql :database rider
CREATE TABLE users (
       username text PRIMARY KEY);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

And yeah, that's all we will use. But, in order to create users as
Postgres users, we will only use an UDF to create the users:

#+begin_src sql :database rider
DROP  FUNCTION create_user(text,text,text);
CREATE FUNCTION create_user(p_username text, password text, roles text)
       RETURNS VOID AS
       $$
       BEGIN
         INSERT INTO users (username) values (p_username);
         EXECUTE FORMAT('CREATE USER %I PASSWORD %L IN GROUP %I', p_username, password, roles);
       END
       $$
       LANGUAGE 'plpgsql';
       
#+end_src

#+RESULTS:
| DROP FUNCTION   |
|-----------------|
| CREATE FUNCTION |

As we can see, it works:

#+begin_src sql :database rider
select create_user('neidekishima', '123', 'customer');
#+end_src

#+begin_src sql :database rider
select * from users;
#+end_src

#+RESULTS:
| username    |
|-------------|
| valdirakira |

#+begin_src sql :database rider
	\du;
#+end_src

#+RESULTS:
| List of roles  |                                                            |            |
|----------------+------------------------------------------------------------+------------|
| Role name      | Attributes                                                 | Member of  |
| customer       | Cannot login                                               | {}         |
| gustavokishima |                                                            | {customer} |
| postgres       | Superuser, Create role, Create DB, Replication, Bypass RLS | {}         |
| ricardokishima |                                                            | {customer} |
| tamireslemos   |                                                            | {customer} |
| valdirakira    |                                                            | {customer} |


** Ride
We will use the Postgis extension for location related stuff, so we
have to install it.

#+begin_src sql :database rider
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE RIDE (
       id bigint      generated always as identity,
       customer       text    references users,
       driver         text    references users,
       start_location geography(Point),
       destination    geography(Point),
       ts             timestamptz,
       start_time     timestamptz,
       end_time       timestamptz,
       cost           numeric
       );
#+end_src

#+RESULTS:
| CREATE EXTENSION |
|------------------|
| CREATE TABLE     |

*** Lifecycle of a ride
This is good enough to describe a ride. But now, we must think about
how this happens in real life:

- A customer want a ride. This is something that should happen in a
  reasonable amount of time, so we need to find a driver that is close
  to that person. *Because of that, we need to always know the driver
  location*.

- The driver can *deny* a ride, so, *we must keep ride requests saved
  until someone accepts it*. _We don't need to worry about concurrency_
  _in this scenario because Postgres guarantees ACID_. [TODO]

** Driver location
In order to find out the best driver to a given customer, we must
always keep track of the driver location.

#+begin_src sql :database rider
CREATE TABLE DRIVER_LOCATION (
       driver text references users PRIMARY KEY,
       current_location geography(Point),
       ts timestamptz
       );
#+end_src


** Ride requests
We must store ride requests,

#+begin_src sql :database rider
CREATE TABLE RIDE_REQUEST (
       customer          text references users PRIMARY KEY,
       customer_location geography(Point),
       ts                timestamptz
       );
#+end_src

** Creating new rides

#+begin_src sql :database rider
CREATE FUNCTION create_ride(text, text, geography(Point), geography(Point), timestamptz, timestamptz, timestamptz);
	
#+end_src



* Diary :noexport:

- *Tue Nov 12 23:27:21 -03 2024*

  We still need a way to identify the ride phases:

  1. Looking for drivers
  2. Driver going to start location
  3. driver going to destination

  4. We have a good way to calculate distance:
     https://postgis.net/workshops/postgis-intro/geography.html
- *Wed Nov 27 12:37:32 -03 2024*

  The main thing of our model is the *ride*, on which a *customer*,
  defined by having the *customer* role in *pg_users* will be given a
  ride by a *driver*.

  Drivers need to be filtered out by *location* and *status*. Location
  because we can't give a ride to someone that is too far away from
  us. Status because a driver that is giving a ride at the moment
  can't give a ride to someone else unless it finishes.

  We might not need a state machine for that, we can just use the
  current state of the database, we could just use queries, like,
  querying both driver location and ride table to see if a driver is
  available.

  Start the db like this btw:

  #+begin_src shell
  docker-compose up
  #+end_src
- *Thu Nov 28 16:58:22 -03 2024*

  I'm having some issues. I still can't create a database and connect
  to it for some reason, I wonder if I have psql version
  problems. Other than that, I could create a role, which was easy,
  and I assume I can create a customer with ease as well.

  I'm using the pg_users for that, along with the pg_roles. My plan is
  to provide RLS with Postgres only. Of course, a real application
  would require more information, like IDs, but I will not add that,
  as it is somewhat trivial.

  I also would like a way to create many different kinds of data,
  like, inserting different users, but I still don't have that.
- *Fri Nov 29 15:34:09 -03 2024*

  NOTE: When using org mode with sql, you can just add a :database tag
  to the source block that it will automatically run the query in that
  database. Pretty cool
- *Fri Nov 29 16:39:08 -03 2024*

  - Users and what they should do

    Users will have different privileges based on what they should do
    and access. Let's discuss them a little bit:

    - Customer

      A customer will ask for rides. To be able to do that, he must
      know about close drivers, which is granted by the
      *driver_location* table. However, this is not enough, since the
      driver must also be available for a ride. To do this, we should
      look either at another table called *driver_status* or we could
      derive it from drivers that are not in rides at the
      moment. Beyond that, the customer should only know about drivers
      that are at a specific range of distance from them, so, driver
      location comes into place once more. As most of that is derived,
      the customer should have access to a *view*, that will need the
      following information:

      - driver location
      - driver status
      - customer location

      This will give us available drivers for that customer. With
      that, we should generate inputs for another table, that will
      work as a form of...
- *Fri Nov 29 17:19:52 -03 2024*

  RESTARTING DISCUSSION

  I think a better way to show availability is to use the driver
  location table and add a "status" on it, indexing the table by
  "status" and "location", so, when a ride request happen, the user
  will only look into *driver_location_status*.

  This must still generate the *ride_request* tuple, because we will
  give the option to a *driver* to accept it or not.

  The acceptance of the ride will then generate a tuple on the *ride*
  table.
- *Mon Dec  2 15:23:04 -03 2024*

  Some stuff I discovered:

  - I can't reference a system table
  - I can't reference views

  Some suggestions:

  - Create a table that is updated from pg_roles hook. This is from
    this idea that Bellani sent me:
    https://supabase.com/blog/roles-postgres-hooks

    This is not bad, but if I'm honest, it's a bit more than what I
    wanted to do.

  - Create a table that will be the "users" table and use it has the
    source of truth, so, creating a new user should be done with an
    UDF.

    I like this one, that's what I'll use.
- *Wed Dec  4 21:04:41 -03 2024*

  I was able to make the function work! Although not if I pass two
  groups.
- *Tue Dec 10 16:48:48 -03 2024*
  
  Now, I want to be able to insert new *rides*. Let's do this through a function.
- *Wed Dec 11 13:49:21 -03 2024*

  It would be good if I could create constraints based on the pg_user
  table, but it might be unnecessary since I'll be the one doing the
  insertion.

  (NB. I'll do something silly for now: giving a ride will always be
  going from A to B (grabbing customer) and from B to C (delivering
  customer), with A->B and B->C being straight lines. If I'm able to
  make it quick, I'll try to imitate stuff with location.)

  A *RIDE* is something with phases, so, let's think about this:

  - happy path
    - customer requests ride (insert in ride_request)
    - driver accepts ride (remove from ride_request, insert in ride
      *without end_time*)
      - If a driver *has a ride without and end_time, it means he is
        giving a ride*.
      - driver goes to ride location
      - driver goes to destination
  - driver finishes ride (adds *end_time* to ride.end_time)
- refuse ride path
  - customer requests ride (insert in ride_request)
  - Denying means nothing happens, the requests just hangs there at
    ride_request

- *UP NEXT*

  With most tables set up, we can start giving rides.

  - *TODO* Create a function to request a ride (insert in ride_request)
  - *TODO* " set up driver_location
  - *TODO* " start a ride (insert in ride without ride.end_time)
  - *TODO* " finish ride  (update existing ride with ride.end_time)

